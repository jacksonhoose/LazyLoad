(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.offset = offset;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_ATTRIBUTE = 'data-lazy-load';
var DEFAULT_SELECTOR = '[' + DEFAULT_ATTRIBUTE + ']';

function offset(el) {
    var top = 0;
    var left = 0;

    while (el) {
        left += el.offsetLeft;
        top += el.offsetTop;
        el = el.offsetParent;
    }

    return { left: left, top: top };
};

var LazyLoad = (function () {
    function LazyLoad() {
        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, LazyLoad);

        var _options$selector = options.selector;
        var selector = _options$selector === undefined ? DEFAULT_SELECTOR : _options$selector;
        var _options$onImageLoade = options.onImageLoaded;
        var onImageLoaded = _options$onImageLoade === undefined ? function () {} : _options$onImageLoade;
        var _options$onScrollToIm = options.onScrollToImage;
        var onScrollToImage = _options$onScrollToIm === undefined ? function () {} : _options$onScrollToIm;
        var delay = options.delay;

        Object.assign(this, {
            _delay: delay,
            _selector: selector,
            _images: Array.from(document.querySelectorAll(selector)),

            /**
             * Called when the image is loaded.
             * @type {Function}
             */
            _onImageLoaded: onImageLoaded,

            /**
             * Called when the image comes into the view port.
             * @type {Function}
             */
            _onScrollToImage: onScrollToImage,

            _distances: null,
            _distanceScrolled: 0,
            _doc: window.document,
            _window: window
        });

        this._getAllElementOffsets();

        this._onScrollHandler = this._onScrollHandler.bind(this);
        this._onResizeHandler = this._onResizeHandler.bind(this);

        this._attachEvents();
    }

    _createClass(LazyLoad, [{
        key: '_onResizeHandler',
        value: function _onResizeHandler(e) {
            return this._getAllElementOffsets(e) && this._onScrollHandler(e);
        }
    }, {
        key: '_onScrollHandler',
        value: function _onScrollHandler(e) {
            console.log('scroll');
            return this._scrollResizeHandler(e) && this._maybeRevealElements();
        }
    }, {
        key: '_attachEvents',
        value: function _attachEvents() {
            this._doc.addEventListener('scroll', this._onScrollHandler);
            this._doc.addEventListener('resize', this._onResizeHandler);
        }
    }, {
        key: '_getOffsetTop',
        value: function _getOffsetTop(document, element) {
            var box = element.getBoundingClientRect();
            return box.top + document.scrollY;
        }
    }, {
        key: '_loadImage',
        value: function _loadImage(image) {
            var _this = this;

            // Return early if the image is already loading.
            var imageInfo = this._distances.get(image);
            if (!image || imageInfo && imageInfo.isLoading) return;

            var loadedCallback = function loadedCallback(e) {
                image.removeEventListener('load', loadedCallback);
                _this._distances.delete(image);
                _this._onImageLoaded(image);

                if (_this._distances.length === 0) _this.destroy();
            };
            image.addEventListener('load', loadedCallback);
            image.setAttribute('src', image.getAttribute(DEFAULT_ATTRIBUTE));

            // Set the image as loading.
            this._distances.set(image, Object.assign({}, this._distances.get(image), { isLoading: true }));
            // Call scroll to callback.
            this._onScrollToImage(image);
        }
    }, {
        key: '_maybeRevealElements',
        value: function _maybeRevealElements(e) {
            var _this2 = this;

            Array.from(this._distances.keys()).forEach(function (image) {
                return _this2._distanceScrolled >= _this2._distances.get(image).offsetTop && _this2._loadImage(image);
            });
        }
    }, {
        key: '_getAllElementOffsets',
        value: function _getAllElementOffsets() {
            this._distances = this._images.reduce(function (images, image) {

                if (images.has(image) && !images.get(image).isLoading) return images;

                images.set(image, {
                    offsetTop: offset(image).top,
                    isLoading: false,
                    timeOut: null
                });

                return images;
            }, this._distances || new Map());
            return true;
        }
    }, {
        key: '_getScrolledHeight',
        value: function _getScrolledHeight() {
            return window.innerHeight + window.scrollY;
        }
    }, {
        key: '_scrollResizeHandler',
        value: function _scrollResizeHandler(e) {
            var distance = this._getScrolledHeight();

            if (distance <= this._distanceScrolled) return;

            this._distanceScrolled = distance;

            return true;
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this._doc.removeEventListener('scroll', this._onScrollHandler);
            this._doc.removeEventListener('resize', this._onResizeHandler);
        }
    }]);

    return LazyLoad;
})();

exports.default = LazyLoad;

},{}],2:[function(require,module,exports){
'use strict';

var _src = require('../src');

var _src2 = _interopRequireDefault(_src);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener('DOMContentLoaded', function (e) {
    var lazy = new _src2.default();
});

},{"../src":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
